prototype(NeosRulez.Blog:Content.BlogPosts) < prototype(Neos.Neos:ContentComponent) {

    showaslist = ${node.properties.showaslist ? true : false}
    blogcategories = ${node.properties.blogcategories}
    startingPoint = ${node.properties.nodeidentifier}

    pagebrowser = ${node.properties.pagebrowser}
    showdate = ${node.properties.showdate}
    showsubtitle = ${node.properties.showsubtitle}
    sorting = ${node.properties.sorting}

    showauthor = ${node.properties.showauthor}
    showcategories = ${node.properties.showcategories}

    filter = Neos.Fusion:Loop {
        items = ${node.properties.blogcategories}
        itemName = 'category'
        itemKey = 'key'
        itemRenderer = ${category.identifier + (iterator.isLast ? '' : ',')}
    }
    filterstring = ${'[blogcategories *= "' + this.filter + '"]'}

    posts = ${node.properties.posts != '0' ? String.toInteger(node.properties.posts) : 9999}
    postsperpage = ${node.properties.postsperpage != '0' ? String.toInteger(node.properties.postsperpage) : 9999}

    showArchived = ${q(node).property('showArchived')}

    countposts = ${this.startingPoint ? Array.length((this.blogcategories ? q(this.startingPoint).children('[instanceof NeosRulez.Blog:Document.BlogPost]').filterByReference(this.filterstring, 'blogcategories').filter('[_hiddenInIndex=false]').filter(this.showArchived ? '[archived=true]' : '[archived!=true]').get() : q(this.startingPoint).children('[instanceof NeosRulez.Blog:Document.BlogPost]').filter('[_hiddenInIndex=false]').filter(this.showArchived ? '[archived=true]' : '[archived!=true]').get())) : 0}
    page = ${request.arguments.page ? request.arguments.page : 1}
    node = ${node}

    nextpostsStart = ${this.pagebrowser ? (String.toInteger(this.postsperpage) * (String.toInteger(this.page) - 1)) : 0}
    nextpostsEnd = ${this.pagebrowser ? (String.toInteger(this.nextpostsStart) + String.toInteger(this.postsperpage)) : 9999}

    blogposts = ${this.startingPoint ? this.pagebrowser ? (this.blogcategories ? q(this.startingPoint).children('[instanceof NeosRulez.Blog:Document.BlogPost]').sort('blogdate', this.sorting).filterByReference(this.filterstring, 'blogcategories').filter('[_hiddenInIndex=false]').filter(this.showArchived ? '[archived=true]' : '[archived!=true]').slice(this.nextpostsStart, this.nextpostsEnd).get() : q(this.startingPoint).children('[instanceof NeosRulez.Blog:Document.BlogPost]').sort('blogdate', this.sorting).filter('[_hiddenInIndex=false]').filter(this.showArchived ? '[archived=true]' : '[archived!=true]').slice(this.nextpostsStart, this.nextpostsEnd).get()) : (this.blogcategories ? q(this.startingPoint).children('[instanceof NeosRulez.Blog:Document.BlogPost]').sort('blogdate', this.sorting).filterByReference(this.filterstring, 'blogcategories').filter('[_hiddenInIndex=false]').filter(this.showArchived ? '[archived=true]' : '[archived!=true]').slice(0, this.posts).get() : q(this.startingPoint).children('[instanceof NeosRulez.Blog:Document.BlogPost]').sort('blogdate', this.sorting).filter('[_hiddenInIndex=false]').filter(this.showArchived ? '[archived=true]' : '[archived!=true]').slice(0, this.posts).get()) : false}

    renderer = afx`
        <NeosRulez.Blog:Component.AbstractContent>
            <div @if.render={props.blogposts} class="row filtered">
                <Neos.Fusion:Loop items={props.blogposts} item="item">
                    <NeosRulez.Blog:Component.BlogPostThumb @if.render={!props.showaslist} item={item} />
                    <NeosRulez.Blog:Component.BlogPostRow @if.render={props.showaslist} item={item} />
                </Neos.Fusion:Loop>
            </div>
            <NeosRulez.Blog:Component.BlogPagination @if.render={props.pagebrowser} posts={props.postsperpage} countposts={props.countposts} page={props.page} node={props.node} />
        </NeosRulez.Blog:Component.AbstractContent>
    `

    @cache {
        mode = 'dynamic'
        entryIdentifier {
            node = ${node}
        }
        entryDiscriminator = ${request.arguments.page}
        context {
            1 = 'node'
            2 = 'documentNode'
        }
        entryTags {
            1 = ${Neos.Caching.nodeTag(node)}
        }
    }

}
