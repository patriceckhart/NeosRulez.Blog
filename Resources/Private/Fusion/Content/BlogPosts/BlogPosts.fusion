prototype(NeosRulez.Blog:Content.BlogPosts) < prototype(Neos.Neos:ContentComponent) {

    showaslist = ${q(node).property('showaslist') ? true : false}
    blogcategories = ${q(node).property('blogcategories')}
    startingPoint = ${q(node).property('nodeidentifier')}

    pagebrowser = ${q(node).property('pagebrowser')}
    showdate = ${q(node).property('showdate')}
    showsubtitle = ${q(node).property('showsubtitle')}
    sorting = ${q(node).property('sorting')}

    showauthor = ${q(node).property('showauthor')}
    showcategories = ${q(node).property('showcategories')}

    filter = Neos.Fusion:Loop {
        items = ${q(node).property('blogcategories')}
        itemName = 'category'
        itemKey = 'key'
        itemRenderer = ${category.identifier + (iterator.isLast ? '' : ',')}
    }
    filterstring = ${'[blogcategories *= "' + this.filter + '"]'}

    posts = ${q(node).property('posts') != '0' ? String.toInteger(q(node).property('posts')) : 9999}
    postsperpage = ${q(node).property('postsperpage') != '0' ? String.toInteger(q(node).property('postsperpage')) : 9999}

    showArchived = ${q(node).property('showArchived')}

    recursive = ${q(node).property('recursive')}

    orderBy = ${q(node).property('orderBy') ? q(node).property('orderBy') : 'blogdate'}

    showFirstLast = ${q(node).property('showFirstLast')}

    countposts = ${!this.recursive ?
        (this.startingPoint ? Array.length((this.blogcategories ? q(this.startingPoint).children('[instanceof NeosRulez.Blog:Document.BlogPost]').filterByReference(this.filterstring, 'blogcategories').filter('[_hiddenInIndex=false]').filter(this.showArchived ? '[archived=true]' : '[archived!=true]').get()
        : q(this.startingPoint).children('[instanceof NeosRulez.Blog:Document.BlogPost]').filter('[_hiddenInIndex=false]').filter(this.showArchived ? '[archived=true]' : '[archived!=true]').get())) : 0)
        : (this.startingPoint ? Array.length((this.blogcategories ? q(this.startingPoint).find('[instanceof NeosRulez.Blog:Document.BlogPost]').filterByReference(this.filterstring, 'blogcategories').filter('[_hiddenInIndex=false]').filter(this.showArchived ? '[archived=true]' : '[archived!=true]').get()
        : q(this.startingPoint).find('[instanceof NeosRulez.Blog:Document.BlogPost]').filter('[_hiddenInIndex=false]').filter(this.showArchived ? '[archived=true]' : '[archived!=true]').get())) : 0)}

    page = ${request.arguments.page ? request.arguments.page : 1}
    node = ${node}

    nextpostsStart = ${this.pagebrowser ? (String.toInteger(this.postsperpage) * (String.toInteger(this.page) - 1)) : 0}
    nextpostsEnd = ${this.pagebrowser ? (String.toInteger(this.nextpostsStart) + String.toInteger(this.postsperpage)) : 9999}

    blogposts = ${!this.recursive ?
        (this.startingPoint ?
            this.pagebrowser ?
                (this.blogcategories ?
                    q(this.startingPoint).children('[instanceof NeosRulez.Blog:Document.BlogPost]').sort(this.orderBy, this.sorting).filterByReference(this.filterstring, 'blogcategories').filter('[_hiddenInIndex=false]').filter(this.showArchived ? '[archived=true]' : '[archived!=true]').slice(this.nextpostsStart, this.nextpostsEnd).get()
                    : q(this.startingPoint).children('[instanceof NeosRulez.Blog:Document.BlogPost]').sort(this.orderBy, this.sorting).filter('[_hiddenInIndex=false]').filter(this.showArchived ? '[archived=true]' : '[archived!=true]').slice(this.nextpostsStart, this.nextpostsEnd).get())
                    : (this.blogcategories ? q(this.startingPoint).children('[instanceof NeosRulez.Blog:Document.BlogPost]').sort(this.orderBy, this.sorting).filterByReference(this.filterstring, 'blogcategories').filter('[_hiddenInIndex=false]').filter(this.showArchived ? '[archived=true]' : '[archived!=true]').slice(0, this.posts).get()
                    : q(this.startingPoint).children('[instanceof NeosRulez.Blog:Document.BlogPost]').sort(this.orderBy, this.sorting).filter('[_hiddenInIndex=false]').filter(this.showArchived ? '[archived=true]' : '[archived!=true]').slice(0, this.posts).get()) : false)
                    : (this.startingPoint ? this.pagebrowser ? (this.blogcategories ? q(this.startingPoint).find('[instanceof NeosRulez.Blog:Document.BlogPost]').sort(this.orderBy, this.sorting).filterByReference(this.filterstring, 'blogcategories').filter('[_hiddenInIndex=false]').filter(this.showArchived ? '[archived=true]' : '[archived!=true]').slice(this.nextpostsStart, this.nextpostsEnd).get()
                    : q(this.startingPoint).find('[instanceof NeosRulez.Blog:Document.BlogPost]').sort(this.orderBy, this.sorting).filter('[_hiddenInIndex=false]').filter(this.showArchived ? '[archived=true]' : '[archived!=true]').slice(this.nextpostsStart, this.nextpostsEnd).get())
                    : (this.blogcategories ? q(this.startingPoint).find('[instanceof NeosRulez.Blog:Document.BlogPost]').sort(this.orderBy, this.sorting).filterByReference(this.filterstring, 'blogcategories').filter('[_hiddenInIndex=false]').filter(this.showArchived ? '[archived=true]' : '[archived!=true]').slice(0, this.posts).get()
                    : q(this.startingPoint).find('[instanceof NeosRulez.Blog:Document.BlogPost]').sort(this.orderBy, this.sorting).filter('[_hiddenInIndex=false]').filter(this.showArchived ? '[archived=true]' : '[archived!=true]').slice(0, this.posts).get()) : false)}

    renderer = afx`
        <NeosRulez.Blog:Component.AbstractContent>
            <div @if.render={props.blogposts} class="row filtered">
                <Neos.Fusion:Loop items={props.blogposts} item="item">
                    <NeosRulez.Blog:Component.BlogPostThumb @if.render={!props.showaslist} item={item} />
                    <NeosRulez.Blog:Component.BlogPostRow @if.render={props.showaslist} item={item} />
                </Neos.Fusion:Loop>
            </div>
            <NeosRulez.Blog:Component.BlogPagination @if.render={props.pagebrowser} posts={props.postsperpage} countposts={props.countposts} page={props.page} node={props.node} showFirstLast={props.showFirstLast} />
        </NeosRulez.Blog:Component.AbstractContent>
    `

    @cache {
        mode = 'dynamic'
        entryIdentifier {
            node = ${node}
        }
        entryDiscriminator = ${request.arguments.page || 'static'}
        context {
            1 = 'node'
            2 = 'documentNode'
        }
        entryTags {
            1 = ${Neos.Caching.nodeTag(node)}
            2 = ${Neos.Caching.nodeTypeTag('NeosRulez.Blog:Document.BlogPost', node)}
        }
    }
}
